generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String?
  phone        String?
  password     String
  role         String    @default("CUSTOMER")
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  bookings     Booking[]
  permissions  UserPermission[]
}

model Car {
  id           String    @id @default(cuid())
  make         String
  model        String
  year         Int
  licensePlate String    @unique
  pricePerHour Float
  dailyRate    Float     @default(50)
  kmRate       Float     @default(0.5)
  currency     String    @default("USD")
  status       String    @default("available")
  category     String    @default("economy")
  capacity     Int       @default(5)
  locationId   String?
  image        String?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  bookings     Booking[]
  maintenances Maintenance[]
  location     Location? @relation(fields: [locationId], references: [id])
}

model Location {
  id            String  @id @default(cuid())
  name          String
  address       String
  city          String
  availableCars Int     @default(0)
  status        String  @default("active")
  createdAt     DateTime @default(now())
  cars          Car[]
}

model Booking {
  id           String   @id @default(cuid())
  customerId   String
  carId        String
  driverId     String?
  startTime    DateTime
  endTime      DateTime
  status       String   @default("PENDING")
  totalPrice   Float
  pricingMode  String   @default("daily")
  estimatedKm  Int      @default(0)
  driverPrice  Float    @default(0)
  withDriver   Boolean  @default(false)
  paymentType  String   @default("PAY_LATER") // PAY_NOW or PAY_LATER
  paymentStatus String  @default("PENDING") // PENDING, PAID, FAILED
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  customer     User     @relation(fields: [customerId], references: [id])
  car          Car      @relation(fields: [carId], references: [id])
  driver       Driver?  @relation(fields: [driverId], references: [id])
  payments     Payment[]
}

model Driver {
  id            String    @id @default(cuid())
  name          String
  phone         String
  email         String?
  licenseNumber String    @unique
  employeeType  String    @default("PERMANENT")
  hourlyRate    Float?
  salary        Float?
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  bookings      Booking[]
  leaves        Leave[]
}

model Permission {
  id          String           @id @default(cuid())
  resource    String
  action      String
  description String?
  users       UserPermission[]
  
  @@unique([resource, action])
}

model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  permissionId String
  granted      Boolean    @default(true)
  createdAt    DateTime   @default(now())
  
  user         User       @relation(fields: [userId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  
  @@unique([userId, permissionId])
}

model PricingRule {
  id           String  @id @default(cuid())
  category     String
  dailyRate    Float
  kmRate       Float?
  currency     String  @default("USD")
  weekendRate  Float?
  createdAt    DateTime @default(now())
}

model Leave {
  id          String   @id @default(cuid())
  employeeId  String
  employeeType String
  leaveType   String
  startDate   DateTime
  endDate     DateTime
  reason      String?
  status      String   @default("PENDING")
  approvedBy  String?
  createdAt   DateTime @default(now())
  
  driver      Driver?  @relation(fields: [employeeId], references: [id])
  
  @@index([employeeId, startDate, endDate])
}

model Maintenance {
  id          String   @id @default(cuid())
  carId       String
  type        String
  description String
  startDate   DateTime
  endDate     DateTime?
  cost        Float?
  status      String   @default("SCHEDULED")
  createdAt   DateTime @default(now())
  
  car         Car      @relation(fields: [carId], references: [id])
  
  @@index([carId, startDate, endDate])
}

model Payment {
  id          String   @id @default(cuid())
  bookingId   String
  amount      Float
  method      String   // CARD, CASH, BANK_TRANSFER
  status      String   @default("PENDING") // PENDING, COMPLETED, FAILED
  paymentDate DateTime?
  createdAt   DateTime @default(now())
  
  booking     Booking  @relation(fields: [bookingId], references: [id])
}